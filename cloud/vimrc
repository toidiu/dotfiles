set nocompatible


" For any plugins that use this, make their keymappings use comma
let mapleader = ","
let maplocalleader = ","

" Userful macros
nmap \v :vsplit<CR>
nmap \s :split<CR>
nmap \e :<C-U>call ToggleNerdTree()<CR>

"new
"nmap \g :Gstatus<CR>
nmap \p :set paste!<CR>:set paste?<CR>
nmap \h :nohlsearch<CR>
nmap \f mt:Goyo<CR>'tzz
"nmap \i vip:sort<CR>

" Spelling ------
set spelllang=en
set spellfile=~/.dotfiles/vim/en.utf-8.add
nmap \w :setlocal invspell<CR>

" Buffers --------
" switch between last file
nmap <C-e> :e#<CR>

" Move between open buffers.
"nmap <C-n> :bnext<CR>
"nmap <C-p> :bprev<CR>
:nnoremap <Leader>q :bd<CR>

" Window ---------
" Super fast window movement shortcuts
noremap <C-j> <C-W>j
noremap <C-k> <C-W>k
noremap <C-h> <C-W>h
noremap <C-l> <C-W>l

" Move -----------
noremap <S-J> <C-D>
noremap <S-K> <C-U>
noremap <S-H> b
noremap <S-L> e
noremap b <C-%>


" ----------------------------------------------------------------------------
" PLUGIN SETTINGS
" ----------------------------------------------------------------------------
call plug#begin('~/.vim/plugged')

" FZF
Plug 'junegunn/fzf', { 'dir': '~/.fzf', 'do': './install --bin' }
Plug 'junegunn/fzf.vim'

" Solarized
"Plug 'altercation/vim-colors-solarized'

Plug 'chriskempson/base16-vim'

" Supertab
Plug 'ervandew/supertab'

" VIMUX
Plug 'benmills/vimux'

" ALE
" Plug 'w0rp/ale'

" Lightline
"Plug 'itchyny/lightline.vim'

" NerdTree
Plug 'scrooloose/nerdtree'

" GitGutter
Plug 'airblade/vim-gitgutter'

" fugitive
Plug 'tpope/vim-fugitive'

" Goyo
Plug 'junegunn/goyo.vim'

" Commentary
Plug 'tpope/vim-commentary'

" Surround
Plug 'tpope/vim-surround'

" Repeat
Plug 'tpope/vim-repeat'

" Vim Tmux Navigation
Plug 'christoomey/vim-tmux-navigator'

" arpeggio (chords)
Plug 'kana/vim-arpeggio'

" vim-vue (syntax)
Plug 'posva/vim-vue'

" vim-toml
Plug 'cespare/vim-toml'

call plug#end()


" --------------------------------

" SYNTAX - faster syntax highlighting than polygot
filetype plugin indent on

" make vim-vue faster (syntax)
let g:vue_disable_pre_processors = 1

" commentaty
autocmd FileType sql setlocal commentstring=--\ %s

" arpeggio
" call arpeggio#map('n', '', 0, 'jk', ':VimuxRunLastCommand<CR>')




" FZF
""git as a project dir
"function! s:find_git_root()
"  return system('git rev-parse --show-toplevel 2> /dev/null')[:-2]
"endfunction
"command! ProjectFiles execute 'Files' s:find_git_root()
" gitignore
let $FZF_DEFAULT_COMMAND = 'rg --files'
" FZF (replaces Ctrl-P, FuzzyFinder and Command-T)
set rtp+=/usr/local/opt/fzf
set rtp+=~/.fzf
nmap ; :Buffers<CR>
nmap <Leader>t :Tags<CR>
nmap <Leader>d :call fzf#vim#tags("'" . expand('<cword>'))<CR>
"nmap <Leader>t :ProjectFiles<CR>
nmap <Leader>f :Files<CR>
" Similarly, we can apply it to fzf#vim#grep. To use ripgrep instead of ag:
" command! -bang -nargs=* Rg
"   \ call fzf#vim#grep(
"   \   'rg --column --line-number --no-heading --color=always --smart-case '.shellescape(<q-args>), 1,
"   \   <bang>0 ? fzf#vim#with_preview('up:60%')
"   \           : fzf#vim#with_preview('right:50%:hidden', '?'),
"   \   <bang>0)
nmap <Leader>r :Rg<CR>

" ALE
" let g:ale_sign_warning = '▲'
" let g:ale_sign_error = '✗'
" highlight link ALEWarningSign String
" highlight link ALEErrorSign Title
" let g:ale_linters = {'rust': ['rls']}
" let g:ale_rust_cargo_use_check = 1

" VIMUX
" Prompt for a command to run
map <Leader>vc :VimuxPromptCommand<CR>
" Run last command executed by VimuxRunCommand
map <Leader>vv :VimuxRunLastCommand<CR>

" GOYO
let g:goyo_width = "120"
let g:goyo_heith = "80%"

" Supertab
"runtime syntax/colortest.vim
highlight Pmenu ctermbg=lightred gui=bold
highlight PmenuSel ctermbg=white


"" Lightline
"let g:lightline = {
"\ 'colorscheme': 'wombat',
"\ 'active': {
"\   'left': [['mode', 'paste'], ['filename', 'modified']],
"\   'right': [['lineinfo'], ['percent'], ['readonly', 'linter_warnings', 'linter_errors', 'linter_ok']]
"\ },
"\ 'component_expand': {
"\   'linter_warnings': 'LightlineLinterWarnings',
"\   'linter_errors': 'LightlineLinterErrors',
"\   'linter_ok': 'LightlineLinterOK'
"\ },
"\ 'component_type': {
"\   'readonly': 'error',
"\   'linter_warnings': 'warning',
"\   'linter_errors': 'error'
"\ },
"\ }
"function! LightlineLinterWarnings() abort
"  let l:counts = ale#statusline#Count(bufnr(''))
"  let l:all_errors = l:counts.error + l:counts.style_error
"  let l:all_non_errors = l:counts.total - l:all_errors
"  return l:counts.total == 0 ? '' : printf('%d ◆', all_non_errors)
"endfunction
"function! LightlineLinterErrors() abort
"  let l:counts = ale#statusline#Count(bufnr(''))
"  let l:all_errors = l:counts.error + l:counts.style_error
"  let l:all_non_errors = l:counts.total - l:all_errors
"  return l:counts.total == 0 ? '' : printf('%d ✗', all_errors)
"endfunction
"function! LightlineLinterOK() abort
"  let l:counts = ale#statusline#Count(bufnr(''))
"  let l:all_errors = l:counts.error + l:counts.style_error
"  let l:all_non_errors = l:counts.total - l:all_errors
"  return l:counts.total == 0 ? '✓ ' : ''
"endfunction
"
"" Update and show lightline but only if it's visible (e.g., not in Goyo)
"autocmd User ALELint call s:MaybeUpdateLightline()
"function! s:MaybeUpdateLightline()
"  if exists('#lightline')
"    call lightline#update()
"  end
"endfunction

"" SOLARIZED
" set background=light
" colorscheme solarized

" Custom colors for NERDTree
highlight def link NERDTreeRO NERDTreeFile









" ----------------------------------------------------------------------------
" Other
" ----------------------------------------------------------------------------
set tabstop=2 "Number of spaces that a <Tab> in the file counts for
set shiftwidth=2 "Number of spaces to use for each step of (auto)indent
set softtabstop=2 "Number of spaces that a <Tab> counts for while performing editing operations
set expandtab "tabs expanded to spaces
set smartindent "Do smart autoindenting when starting a new line
set autoindent "Copy indent from current line when starting a new line

set showmatch "When a bracket is inserted, briefly jump to the matching one
set number "show line numbers
set scrolloff=5 "Minimal number of screen lines to keep above and below the cursor.

" Show tab characters, trailing whitespace
set listchars=tab:>-,trail:~,extends:>,precedes:<
set list "Show tabs as CTRL-I is displayed, display $ after end of line
"set visualbell t_vb=        " No flashing or beeping at all

"asdfasdfasdf
"filetype plugin indent on

"=== The ":syntax enable" command will keep your current color settings.  This
"allows using ":highlight" commands to set your preferred colors before or
"after using this command.  If you want Vim to overrule your settings with the
"defaults, use: >
"    :syntax on
if !exists("g:syntax_on")
    syntax enable
endif
""---


set hls "highlight search options
set incsearch "While typing show incremental search
set ic "default to case-insensitive search
set smartcase "allow case-sensitive search if there is one uppercase

set cursorline "highlight current line
hi CursorLine ctermbg=NONE cterm=underline "no color, just underline
set wildmode=longest,list "on tab filename complete, first tab produces longest. Second tab produces list.



set backspace=indent,eol,start "allow backspacing over indent, eol, start
set laststatus=2 " Set status line as second-to-last line
set statusline=%F%m%r%w\ %=\ [%l,%c]\ \ \ %p%%


""""remapping the keys in vim----------------------------
"" Remap jk while in insert mode to ESC
""inoremap jk <ESC>
"" Remap kj while in insert mode to ESC
"inoremap kj <ESC>


" Improved up/down scrolling on wrapped lines
nnoremap j gj
nnoremap k gk
"nnoremap <up> gk
"nnoremap <down> gj
imap <up> <c-o>gk
imap <down> <c-o>gj
" Remap window sizing
nmap <Leader>g :vertical resize 80%<CR>
nmap <Leader>z <C-w>=
nmap f :vertical resize +10<CR>
nmap F :resize +5<CR>

"""auto reload vim----------------------
augroup AutoReloadVimRC
    au!
    " automatically reload vimrc when it's saved
    au BufWritePost $MYVIMRC so $MYVIMRC
augroup END

"set autochdir " Automatically change current working directory to most recent file




" ----------------------------------------------------------------------------
" CUSTOM COMMANDS AND FUNCTIONS
" ----------------------------------------------------------------------------
" Trim spaces at EOL and retab. I run `:CLEAN` a lot to clean up files.
command! TEOL %s/\s\+$//
command! CLEAN retab | TEOL

" Close all buffers except this one
command! BufCloseOthers %bd|e#

" search and replace
:nnoremap <Leader>s :%s/\<<C-r><C-w>\>//gc<Left><Left><Left>

" I always hit ":W" instead of ":w" because I linger on the shift key...
command! Q q
command! W w
command! Wq wq

" Typing `$c` on the command line expands to `:e` + the current path, so it's easy to edit a file in
" the same directory as the current file.
cnoremap $c e <C-\>eCurrentFileDir()<CR>
function! CurrentFileDir()
   return "e " . expand("%:p:h") . "/"
endfunction

" NerdTree toggle functions
function! ToggleNerdTree()
  if IsNerdTreeEnabled()
    execute 'NERDTreeToggle'
  else
    execute 'NERDTreeFind'
  endif
endfunction

function! IsNerdTreeEnabled()
    return exists('t:NERDTreeBufName') && bufwinnr(t:NERDTreeBufName) != -1
endfunction

" Custom mode for distraction-free editing
function! ProseMode()
  call goyo#execute(0, [])
  set spell noci nosi noai nolist noshowmode noshowcmd
  set complete+=s
  set bg=light
  if !has('gui_running')
    "let g:solarized_termcolors=256
  endif
  "colors solarized
endfunction
command! ProseMode call ProseMode()
